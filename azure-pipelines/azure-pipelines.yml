# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
# Disable PR triggers if not needed
pr: none

pool:
  name: Default
  demands:
  - agent.name -equals master-node

variables:
  - name: bkRg
    value: 'tfstateRG01'
  - name: bkstorage
    value: 'asianfood '
  - name: bkcontainer
    value: 'tfstate'
  - name: bkstoragekey
    value: 'terraform.dev.tfstate'
  - group: terraform-dev-vars

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'AsianFoodServiceConnection'
              backendAzureRmResourceGroupName: '$(bkRg)'
              backendAzureRmStorageAccountName: '$(bkstorage)'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstoragekey)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'


          - task: TerraformTask@5
            displayName: Validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

            
            
  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

          - task: TerraformTask@5
            displayName: Init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'AsianFoodServiceConnection'
              backendAzureRmResourceGroupName: '$(bkRg)'
              backendAzureRmStorageAccountName: '$(bkstorage)'
              backendAzureRmContainerName: '$(bkcontainer)'
              backendAzureRmKey: '$(bkstoragekey)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

          - task: TerraformTaskV4@4
            displayName: Tf validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

          - task: TerraformTaskV4@4
            displayName: Tf fmt
            inputs:
              provider: 'azurerm'
              command: 'custom'
              customCommand: 'fmt'
              outputTo: 'console'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

              environmentServiceNameAzureRM: 'AsianFoodServiceConnection'
          - task: TerraformTask@5
            displayName: plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-var="env=$(env)" -out $(Build.SourcesDirectory)/terraform/tfplanfile'
              environmentServiceNameAzureRM: 'AsianFoodServiceConnection'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

          # - task: TerraformTask@5
          #   displayName: apply
          #   inputs:
          #     provider: 'azurerm'
          #     command: 'apply'
          #     commandOptions: '-var="env=$(env)"'
          #     environmentServiceNameAzureRM: 'AsianFoodServiceConnection'
          - task: ArchiveFiles@2
            displayName: Zip TF code
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/terraform'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              replaceExistingArchive: true
          
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: '$(Build.BuildId)-build'
              publishLocation: 'Container'